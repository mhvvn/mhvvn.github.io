<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://mhvvn.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://mhvvn.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-07-16T09:07:17+00:00</updated><id>https://mhvvn.github.io/feed.xml</id><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Tutorial Monitoring Suhu Kelas dengan ESP32 dan Blynk</title><link href="https://mhvvn.github.io/blog/2025/tutorial-monitoring-suhu-kelas-dengan-esp32-dan-blynk/" rel="alternate" type="text/html" title="Tutorial Monitoring Suhu Kelas dengan ESP32 dan Blynk"/><published>2025-07-11T07:02:36+00:00</published><updated>2025-07-11T07:02:36+00:00</updated><id>https://mhvvn.github.io/blog/2025/tutorial-monitoring-suhu-kelas-dengan-esp32-dan-blynk</id><content type="html" xml:base="https://mhvvn.github.io/blog/2025/tutorial-monitoring-suhu-kelas-dengan-esp32-dan-blynk/"><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*7XqqOjSgX5ZioMv67n-DhA.jpeg"/></figure> <figure><img alt="" src="https://cdn-images-1.medium.com/max/581/0*oAqGemrMYfJ3fFOj.png"/></figure> <pre>Import</pre> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=6b3348526e97" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry><entry><title type="html">PIR Sensor HC-SR501 With Servo</title><link href="https://mhvvn.github.io/blog/2025/pir-sensor-hc-sr501-with-servo/" rel="alternate" type="text/html" title="PIR Sensor HC-SR501 With Servo"/><published>2025-05-20T13:02:46+00:00</published><updated>2025-05-20T13:02:46+00:00</updated><id>https://mhvvn.github.io/blog/2025/pir-sensor-hc-sr501-with-servo</id><content type="html" xml:base="https://mhvvn.github.io/blog/2025/pir-sensor-hc-sr501-with-servo/"><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*92d6z_Nly_GOT_8z7uSuAA.png"/></figure> <p>Untuk Codingan Pada Tutorial Menyalakan LED menggunakan Sensor PIR bisa di Download di sini : <a href="https://github.com/mhvvn/Arduino-Sensor/blob/main/PIR-Sensor-Led.ino">https://github.com/mhvvn/Arduino-Sensor/blob/main/PIR-Sensor-Led.ino</a></p> <p>Lanjut Ke Tutorialnya :</p> <p>Tutorial ini akan memandu Anda langkah demi langkah untuk menghubungkan dan memprogram Arduino agar dapat mendeteksi gerakan menggunakan sensor PIR HC-SR501, dan kemudian menggerakkan servo berdasarkan deteksi tersebut.</p> <p><strong>Apa yang Anda Butuhkan:</strong></p> <ol><li><strong>Arduino Uno</strong> (atau board Arduino lain)</li><li><strong>Sensor PIR HC-SR501</strong></li><li><strong>Servo Digital</strong> (misalnya SG90)</li><li><strong>Breadboard</strong></li><li><strong>Kabel Jumper</strong> (male-to-male dan male-to-female)</li><li><strong>Kabel USB</strong> untuk menghubungkan Arduino ke komputer</li><li><strong>Komputer</strong> dengan Arduino IDE terinstal</li></ol> <p>Langkah-langkah Wiring:<br/>Siapkan Breadboard sebagai Power dan Ground:</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/923/1*gsu15eX6JN7z3abewftYLw.png"/><figcaption>Wiring BreadBoard</figcaption></figure> <p><strong>Ambil kabel jumper male-to-male.</strong><br/>Hubungkan pin 5V dari Arduino Uno ke salah satu jalur merah (positif) pada breadboard Anda. Jalur merah ini akan menjadi jalur VCC (daya).<br/>Hubungkan pin GND dari Arduino Uno ke salah satu jalur biru atau hitam (negatif) pada breadboard Anda. Jalur ini akan menjadi jalur GND (ground).<br/>Opsional (untuk breadboard besar): Jika breadboard Anda memiliki dua pasang jalur daya (satu di setiap sisi), hubungkan jalur VCC di satu sisi ke jalur VCC di sisi lain, dan jalur GND di satu sisi ke jalur GND di sisi lain menggunakan kabel jumper pendek. Ini akan memastikan daya tersedia di seluruh breadboard.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/754/1*WmAynKAZu9hKEhbA-9gP5g.png"/><figcaption>Wiring PIR Sensor</figcaption></figure> <p><strong>Hubungkan Sensor PIR HC-SR501:<br/></strong>Tancapkan Sensor PIR HC-SR501 ke breadboard Anda agar pin-pinnya tidak saling bersentuhan.<br/>Gunakan kabel jumper (male-to-female atau male-to-male jika pin PIR bisa langsung masuk ke breadboard):<br/>Hubungkan pin VCC sensor PIR ke jalur VCC (merah) pada breadboard.<br/>Hubungkan pin GND sensor PIR ke jalur GND (biru/hitam) pada breadboard.<br/>Hubungkan pin OUT sensor PIR ke Pin Digital 2 pada Arduino Uno.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*2Le52berg33u0-fU-o_jsA.png"/><figcaption>Wiring Servo</figcaption></figure> <p><strong>Hubungkan Servo Digital:<br/></strong>Tancapkan Servo Digital ke breadboard Anda. Perhatikan warna kabelnya (biasanya cokelat/hitam untuk GND, merah/oranye untuk VCC, dan kuning/putih untuk sinyal).<br/>Gunakan kabel jumper (male-to-female atau male-to-male jika pin servo bisa langsung masuk ke breadboard):<br/>Hubungkan kabel GND servo ke jalur GND (biru/hitam) pada breadboard.<br/>Hubungkan kabel VCC servo ke jalur VCC (merah) pada breadboard.<br/>Hubungkan kabel Signal servo ke Pin Digital 9 pada Arduino Uno.</p> <p>Rangkaian akan terlihat seperti berikut ini :</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/851/1*iTcJBXy6IEp7jedbOmcnNw.png"/></figure> <p>Berikut tabel wiring semua komponen :</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/808/1*SeIcV3PBPtuJSoSKzbjcnA.png"/><figcaption>Wiring Tabel</figcaption></figure> <p><strong>Langkah 3: Menulis Kode Arduino</strong></p> <p>Setelah rangkaian terhubung, kita akan menulis kode Arduino untuk membaca output dari sensor PIR dan mengontrol posisi servo.</p> <ol><li><strong>Buka Arduino IDE</strong> di komputer Anda.</li><li><strong>Buat Sketch Baru</strong> (File &gt; New).</li><li><strong>Salin dan Tempel Kode Berikut:</strong></li></ol> <p>Selamat! Anda telah menyelesaikan bagian pembuka dari tutorial ini. Di bagian selanjutnya, kita akan mengunggah kode ke Arduino dan menguji rangkaian Anda. Apakah Anda siap untuk melanjutkan ke bagian berikutnya?</p> <p>Berikut codingan untuk menjalankan rangkainya silahkan copy atau bisa di download di Github Berikut ini <a href="https://github.com/mhvvn/Arduino-Sensor">https://github.com/mhvvn/Arduino-Sensor</a></p> <pre>#include &lt;Servo.h&gt;<br /><br />int PIR =2;<br />int sensor = 0;<br />Servo myservo;<br /><br />void setup() {<br />pinMode (PIR,INPUT);<br />Serial.begin(9600);<br />myservo.attach(9);<br />}<br /><br />void loop() {<br />  sensor = digitalRead(PIR);<br />  if (sensor==HIGH) {<br />    myservo.write(180);<br />    Serial.println(&quot;Buka&quot;);<br />    delay(2000);<br />  } else {<br />    myservo.write(90);<br />    Serial.println(&quot;Tutup&quot;);<br />    delay(1000);<br />  }<br />}Referensi :<br />https://www.youtube.com/watch?v=UsWniEUrUcI<br />http://youtube.com/watch?v=64rTyiFHbg8 <br />https://jogjarobotika.com/blog/tutorial-sensor-pir-sebagai-saklar-otomatis-b147.html<br />https://www.youtube.com/watch?v=iaGBYe_jhIU<br />https://www.youtube.com/watch?v=HJ7LKPzR3tw</pre> <p>Buka Serial Monitor untuk memastikan rangkaian sudah berjalan dan mengirimkan sinya output seperti berikut ini, pastikan servo bergerak ketika serial monitor menunjukan BUKA dan Tutup ketika objek tidak terdeteksi lagi.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/513/1*sfJqKgonSTUWdnF-P8FrKw.png"/></figure> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2aeeac69ea9f" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry><entry><title type="html">Control Motor Servo Using MPU6050 Sensor</title><link href="https://mhvvn.github.io/blog/2025/control-motor-servo-using-mpu6050-sensor/" rel="alternate" type="text/html" title="Control Motor Servo Using MPU6050 Sensor"/><published>2025-04-23T02:42:08+00:00</published><updated>2025-04-23T02:42:08+00:00</updated><id>https://mhvvn.github.io/blog/2025/control-motor-servo-using-mpu6050-sensor</id><content type="html" xml:base="https://mhvvn.github.io/blog/2025/control-motor-servo-using-mpu6050-sensor/"><![CDATA[<p>Sebelum masuk ke langkah perakitan, bisa melakukan simulasi terlebih dahulu di platfom <a href="https://wokwi.com/"><strong>wokwi.com</strong></a>, dengan membuat akun terlebih dahulu.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/833/0*Myc_7KJFbJUNZV2X.png"/></figure> <p>Homepage wokwi</p> <p>setelah itu piliah platform simulasi yakni arduino</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/833/0*jcR1SK_pvpj9mVgM.png"/></figure> <p>Scroll kebawah piliah <strong>start from scrath, </strong>maka tampilannya akan seperti di bawh ini, dengan code editor di sebelah kiri dan simulator peralatan di sebelah kanan.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/833/0*ghHKwbV8emVAP1bW.png"/></figure> <p>Button Save ada di sebelah kiri atas, untuk menyimpan project supaya tidak hilang jika ter keluar atau jaringan error</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/833/0*9k-I2jZjBDnnsY3t.png"/></figure> <p>Pada sisi simulasi terdapat 3 button yakni start simulasi, add new part/component dan more untuk settingan tambahan.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/833/0*UEs6A1RD28MMnMrj.png"/></figure> <p>Silahkan tambahkan part atau component yang di perlukan untuk menjalankan simulasi kali ini.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/570/0*jZVwNgthKPLuJXhL.png"/></figure> <p>Rangkaian simulasi akan terlihat seperti di bawah ini, dengan kabel yg sudah tersambung di setiap komponennya.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/817/1*yng4UUFf6qf9W42ZiUbsHA.png"/></figure> <p>Install library berikut ini</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/536/1*Gw1f4OpH1QuVW2FCMQO7dg.png"/></figure> <p>Masukan kode berikut ini :</p> <p>Y-Axis</p> <pre>#include &lt;Wire.h&gt;<br />#include &lt;Adafruit_MPU6050.h&gt;<br />#include &lt;Adafruit_Sensor.h&gt;<br />#include &lt;Servo.h&gt;<br /><br />Servo servo;<br />Adafruit_MPU6050 mpu;<br /><br />void setup(void) {<br />  Serial.begin(115200);<br />  servo.attach(9);<br />  Wire.begin();<br /><br />  if (!mpu.begin()) {<br />    Serial.println(&quot;MPU6050 tidak terdeteksi!&quot;);<br />    while (1) delay(10);<br />  }<br /><br />  // Setting konfigurasi sensor<br />  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);<br />  mpu.setGyroRange(MPU6050_RANGE_500_DEG);<br />  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);<br /><br />  servo.write(0); // Posisi awal servo<br />  delay(100);<br />}<br /><br />void loop() {<br />  sensors_event_t a, g, temp;<br />  mpu.getEvent(&amp;a, &amp;g, &amp;temp);<br /><br />  float accY = a.acceleration.y;<br /><br />  int value = map(accY, -10, 10, 180, 0);  // Mapping nilai Y ke sudut servo<br />  value = constrain(value, 0, 180);        // Hindari nilai ekstrem<br /><br />  servo.write(value);<br /><br />  Serial.print(&quot;Y: &quot;);<br />  Serial.print(accY);<br />  Serial.print(&quot; =&gt; Servo: &quot;);<br />  Serial.println(value);<br /><br />  delay(10);<br />}</pre> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*upLky9cP53n7kgkHr6Ikbw.png"/></figure> <p>Ketika di jalankan akan tampil seperti di bawah ini</p> <p>Z-Axis</p> <pre>#include &lt;Wire.h&gt;<br />#include &lt;Adafruit_MPU6050.h&gt;<br />#include &lt;Adafruit_Sensor.h&gt;<br />#include &lt;Servo.h&gt;<br /><br />Servo servo;<br />Adafruit_MPU6050 mpu;<br /><br />void setup(void) {<br />  Serial.begin(115200);<br />  servo.attach(9);<br />  Wire.begin();<br /><br />  if (!mpu.begin()) {<br />    Serial.println(&quot;MPU6050 tidak terdeteksi!&quot;);<br />    while (1) delay(10);<br />  }<br /><br />  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);<br />  mpu.setGyroRange(MPU6050_RANGE_500_DEG);<br />  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);<br /><br />  servo.write(0); // Initial servo position<br />  delay(100);<br />}<br /><br />void loop() {<br />  sensors_event_t a, g, temp;<br />  mpu.getEvent(&amp;a, &amp;g, &amp;temp);<br /><br />  float accZ = a.acceleration.z; <br /><br />  int value = map(accZ, -10, 10, 180, 0);  // Ubah sesuai rentang kebutuhanmu<br />  value = constrain(value, 0, 180);<br /><br />  servo.write(value);<br /><br />  Serial.print(&quot;Z: &quot;);<br />  Serial.print(accZ);<br />  Serial.print(&quot; =&gt; Servo: &quot;);<br />  Serial.println(value);<br /><br />  delay(10);<br />}</pre> <p>X-Axis — silahkan di coba dan Analisis pada bagian mana yang membuat setiap axis bergerak, coba gerakan servo ke 90 drajat.</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=148511d1bf3f" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry><entry><title type="html">Cara Menggunakan Sensor MPU6050 denagn Arduino dan Menampilkan ke LCD</title><link href="https://mhvvn.github.io/blog/2025/cara-menggunakan-sensor-mpu6050-denagn-arduino-dan-menampilkan-ke-lcd/" rel="alternate" type="text/html" title="Cara Menggunakan Sensor MPU6050 denagn Arduino dan Menampilkan ke LCD"/><published>2025-04-16T02:53:43+00:00</published><updated>2025-04-16T02:53:43+00:00</updated><id>https://mhvvn.github.io/blog/2025/cara-menggunakan-sensor-mpu6050-denagn-arduino-dan-menampilkan-ke-lcd</id><content type="html" xml:base="https://mhvvn.github.io/blog/2025/cara-menggunakan-sensor-mpu6050-denagn-arduino-dan-menampilkan-ke-lcd/"><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*cLalyckgfJLnJE2Q"/></figure> <p>Pada tutorial ini yaitu cara menggunakan MPU6050 dengan Arduino. Melalui sensor ini, kita dapat mengukur rotasi terutama pada 6 sumbu, yaitu tiga sumbu melalui accelerometer dan tiga sumbu melalui gyroscope. Dengan kata lain, sensor ini mencakup baik accelerometer maupun gyroscope. Sensor MPU6050 juga dapat mengukur percepatan statis akibat gravitasi, gerakan akibat getaran, percepatan dinamis, dan suhu. Selain itu, teknologi pada sensor ini juga diterapkan dalam sistem pengaktifan anti-gravitasi — misalnya pada helikopter, pesawat, dan pesawat ulang-alik. Dengan menggunakan sensor MPU6050, kita bisa membuat robot seimbang diri (self-balancing robot), drone, pesawat, dan lain-lain.</p> <p><strong>Apa itu Sensor MPU6050?</strong></p> <p>Sensor jenis ini dibangun dengan sistem yang disebut MEMS (Micro-Electro-Mechanical-Systems). Sistem ini mencakup baik accelerometer maupun gyroscope.</p> <p><strong>Apa itu MEMS?</strong><br/>MEMS adalah kependekan dari Micro-Electro-Mechanical-Systems, yaitu sistem mikro yang dibentuk oleh komponen-komponen kecil. Komponen-komponen ini terbuat dari bahan seperti silikon, polimer, dan logam, serta dilengkapi dengan mikrokontroler.</p> <p><strong>Cara Kerja Accelerometer</strong></p> <p>Accelerometer pada sensor ini juga melibatkan teknologi MEMS. Cara kerjanya adalah dengan mengidentifikasi sudut kemiringan sepanjang tiga sumbu (X, Y, dan Z) serta menghitung percepatan melalui pengukuran perbedaan kapasitansi. Desainnya dibuat pada wafer silikon dan mencakup sebuah massa yang memungkinkan pegas polysilicon bergerak di antara pelat-pelat luar. Ketika gaya percepatan diberikan ke arah tertentu, perbedaan kapasitansi antara pelat dan massa terjadi, dan nilai perbedaan inilah yang kemudian dikonversi menjadi nilai percepatan dalam bentuk tegangan analog. Rentang skala penuh untuk pengukuran percepatan adalah ±2g, ±4g, ±8g, dan ±16g.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*PQVDvKjtTyvbzzSE"/></figure> <p><strong>Cara Kerja Gyroscope</strong></p> <p>Gyroscope pada sensor MPU6050 juga menggunakan teknologi MEMS. Dengan teknologi inilah kita bisa mengukur kecepatan rotasi pada sumbu X, Y, dan Z. Gyroscope terdiri dari empat bagian yang saling bereaksi terhadap efek Coriolis. Ketika diberikan sudut rotasi eksternal, bagian massa yang fleksibel akan bergerak secara vertikal. Perubahan perpindahan inilah yang digunakan untuk mengukur sudut gyroscope berdasarkan efek Coriolis. Rentang keluaran skala penuh yang tersedia adalah ±250, ±500, ±1000, dan ±2000. Pengukuran rotasi ini biasanya dikategorikan ke dalam tiga mode:<br/><strong>Roll:</strong> Mode roll ketika sudut roll berubah. <br/><strong>Pitch: </strong>Mode pitch ketika sudut pitch berubah. <br/><strong>Yaw:</strong> Mode yaw ketika sudut yaw berubah.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/576/0*zZh0RfNA5qnY7cgY"/></figure> <p><strong>Struktur PIN MPU6050 dengan Arduino</strong><br/>Sensor ini menggunakan chip MPU6050 yang pada dasarnya beroperasi dengan tegangan 3.3V. Namun, dengan menggunakan regulator tegangan LD3958 yang disertakan, sensor ini mampu diberikan potensi 5V. Hal ini memudahkan untuk menghubungkan sensor ke Arduino.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*WXd4kMqqpOv-Dz_-"/></figure> <p><strong>Komponen yang Diperlukan:</strong></p> <p><strong>Arduino UNO Board — </strong>1 <br/>Sensor MPU6050 — 1 <br/>LCD I2 C — 1 <br/>Kabel Jumper</p> <p><strong>Langkah-langkah Perakitan</strong></p> <p>Sebelum masuk ke langkah perakitan, bisa melakukan simulasi terlebih dahulu di platfom <a href="https://wokwi.com/"><strong>wokwi.com</strong></a>, dengan membuat akun terlebih dahulu.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*uv_aDmrpeYFaU5dNAwJiEw.png"/><figcaption>Homepage wokwi</figcaption></figure> <p>setelah itu piliah platform simulasi yakni arduino</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*-P5gmpArGtxRjCS057hN0w.png"/></figure> <p>Scroll kebawah piliah <strong>start from scrath, </strong>maka tampilannya akan seperti di bawh ini, dengan code editor di sebelah kiri dan simulator peralatan di sebelah kanan.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*6MrRdafrLAb1--nPcEpRgg.png"/></figure> <p>Button Save ada di sebelah kiri atas, untuk menyimpan project supaya tidak hilang jika ter keluar atau jaringan error</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/957/1*F-PFZSq9vxfuejmRoFY-Sg.png"/></figure> <p>Pada sisi simulasi terdapat 3 button yakni start simulasi, add new part/component dan more untuk settingan tambahan.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/958/1*syWrRRs8NdiVpy1HvyhwVw.png"/></figure> <p>Silahkan tambahkan part atau component yang di perlukan untuk menjalankan simulasi kali ini.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/570/1*T7Gm4odP-Y-VeewezuhroQ.png"/></figure> <p>Rangkaian simulasi akan terlihat seperti di bawah ini, dengan kabel yg sudah tersambung di setiap komponennya.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/870/1*fb_CJtNW-QYOJZ7Jc2JsOw.png"/></figure> <p>Pastikan semua library yg di butuhkan untuk menjalankan sudah di tambahkan, berikut ini library yg di butuhkan, klik button plus untuk mencari dan menambahkan library nya.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/971/1*1VDQwcBER3Zx_oewTI45IA.png"/></figure> <p>jika semua rangakian dan library sudah di tambahkan, sekarang tahapan penambahan kode untuk dapat menjalankan sensor dan menampilkan hasilnya ke lcd.</p> <p>Copy dan paste code untuk menjalankan project nya<br/>Berikut adalah contoh kode program atau bisa di downlad pada link berikut <a href="https://github.com/mhvvn/Sensor">github.com/mhvvn/Sensor</a>:</p> <pre>#include &lt;LiquidCrystal_I2C.h&gt;<br />#include &lt;Adafruit_MPU6050.h&gt;<br />#include &lt;Adafruit_Sensor.h&gt;<br />#include &lt;Wire.h&gt;<br /><br />Adafruit_MPU6050 mpu;<br />LiquidCrystal_I2C lcd(0x27, 16, 2);<br /><br />void setup(void) {<br />  Serial.begin(115200);<br />  Wire.begin();<br />  lcd.init();<br />  lcd.backlight();<br />  mpu.begin();<br /><br />  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);<br />  mpu.setGyroRange(MPU6050_RANGE_500_DEG);<br />  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);<br />  delay(100);<br />}<br /><br />void loop() {<br /><br />  /* Get new sensor events with the readings */<br />  sensors_event_t a, g, temp;<br />  mpu.getEvent(&amp;a, &amp;g, &amp;temp);<br /><br />  /* Print out the values */<br />  Serial.print(&quot;Acceleration X: &quot;);<br />  Serial.print(a.acceleration.x);<br />  Serial.print(&quot;, Y: &quot;);<br />  Serial.print(a.acceleration.y);<br />  Serial.print(&quot;, Z: &quot;);<br />  Serial.print(a.acceleration.z);<br />  Serial.println(&quot; m/s^2&quot;);<br /><br />  Serial.print(&quot;Rotation X: &quot;);<br />  lcd.setCursor(0, 0);<br />  lcd.print(&quot;R:&quot;);<br />  lcd.print(g.gyro.x);<br />  Serial.print(g.gyro.x);<br /><br />  Serial.print(&quot;, Y: &quot;);<br />  lcd.setCursor(0, 1);<br />  lcd.print(&quot;P:&quot;);<br />  lcd.print(g.gyro.y);<br />  Serial.print(g.gyro.y);<br /><br />  Serial.print(&quot;, Z: &quot;);<br />  lcd.setCursor(8, 0);<br />  lcd.print(&quot;Y:&quot;);<br />  lcd.print(g.gyro.z);<br />  Serial.print(g.gyro.z);<br />  Serial.println(&quot; rad/s&quot;);<br /><br />  Serial.print(&quot;Temperature: &quot;);<br />  lcd.setCursor(8, 1);<br />  lcd.print(&quot;T:&quot;);<br />  lcd.print(temp.temperature);<br />  Serial.print(temp.temperature);<br />  Serial.println(&quot; degC&quot;);<br /><br />  Serial.println(&quot;&quot;);<br />  delay(500);<br />}</pre> <p>Untuk menjalankan simulasi klik button play berwarna <strong>hijau</strong></p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/579/1*y6P8Nq6IfDQePTHSA7uNGA.png"/></figure> <p>Biasanya akan di suruh untuk menunggu antrain compiling, karena menggunakan lisensi community yg gratis.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/885/1*144fWbqS4U1gsarNEXVAfg.png"/></figure> <p>Terkadang juga akan tampil alert seperti di atas, tetapi jika berhasil melakukan compiling maka akan tampil seperti di bawah ini.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*cx35LjKkKyJG6HCQjPWCEA.png"/></figure> <p>Simulasi di wokwi sudah berhasil, sekarang adalah tahapan merangkai dengan peralatan yg sebenarnya.</p> <p><strong>Langkah 1</strong><br/>berikut ini komponen yg di butuhkan untuk merangkainya</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/647/1*O8RHxvgnH3mRB80MjNJLVw.png"/></figure> <p><strong>Langkah 2</strong><br/>Hubungkan semua komponen sesuai dengan diagram rangkaian yang disediakan sama seperti di simulasi sebelumnya.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/576/0*HX16aCDDBMrzNbit"/></figure> <p><strong>Langkah 3:<br/></strong>Siapkan program (kode) untuk proyek ini. Pertama-tama, unduh dan instal library”<strong>Adafruit MPU6050</strong>&quot;. Kamu juga dapat mengunduh program lengkap untuk proyek ini jika diperlukan.</p> <p><strong>Penjelasan Kode:</strong></p> <ul><li><strong>Library:</strong> Pertama, <strong>Library</strong>untuk MPU6050, LCD I2C, sensor Adafruit, dan Wire disertakan juga.</li></ul> <pre>#include &lt;LiquidCrystal_I2C.h&gt;<br />#include &lt;Adafruit_MPU6050.h&gt;<br />#include &lt;Wire.h&gt;</pre> <ul><li>Kemudian buat objek untuk sensor MPU6050 (mpu) dan objek untuk LCD yang mengatur alamat I2C serta ukuran layar (16x2).</li></ul> <pre>Adafruit_MPU6050 mpu;<br />LiquidCrystal_I2C lcd(0x27, 16, 2)</pre> <ul><li><strong>Fungsi </strong>setup()<strong>:</strong> Pada fungsi setup, monitor serial, LCD, dan sensor diinisialisasi.</li></ul> <pre>void setup(void) {<br />  Serial.begin(115200);<br />  lcd.init();<br />  lcd.backlight();<br />  mpu.begin();</pre> <ul><li>Selain itu, disetel juga rentang untuk accelerometer (misalnya ±8G),</li></ul> <pre>mpu.setAccelerometerRange(MPU6050_RANGE_8_G);</pre> <ul><li>rentang untuk gyroscope (misalnya ±500°/detik), dan</li></ul> <pre>mpu.setGyroRange(MPU6050_RANGE_500_DEG);</pre> <ul><li>bandwidth filter untuk sensor.</li></ul> <pre>mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);<br />  delay(100);</pre> <ul><li><strong>Fungsi </strong>loop()<strong>:</strong> Di fungsi loop, nilai-nilai dari accelerometer, gyroscope, dan suhu diperoleh menggunakan fungsi mpu.getEvent(). Nilai-nilai tersebut kemudian ditampilkan pada monitor serial. Selain itu, nilai rotasi gyroscope dan suhu ditampilkan secara bersamaan pada LCD.</li></ul> <pre>void loop() {<br />  sensors_event_t a, g, temp;<br />  mpu.getEvent(&amp;a, &amp;g, &amp;temp);<br /> <br />  /* Print out the values */<br />Accelerations (X,Y,Z)<br />  Serial.print(“Acceleration X: “);<br />  Serial.print(a.acceleration.x);<br />  Serial.print(“, Y: “);<br />  Serial.print(a.acceleration.y);<br />  Serial.print(“, Z: “);<br />  Serial.print(a.acceleration.z);<br />  Serial.println(” m/s^2″);<br />Rotetion (Roll, pitch and yaw)<br />  Serial.print(“Rotation X: “);<br />  lcd.setCursor(0, 0);<br />  lcd.print(“X:”);<br />  lcd.print(g.gyro.x);<br />  Serial.print(g.gyro.x);<br /> <br />  Serial.print(“, Y: “);<br />  lcd.setCursor(0, 1);<br />  lcd.print(“Y:”);<br />  lcd.print(g.gyro.y);<br />  Serial.print(g.gyro.y);<br /> <br />  Serial.print(“, Z: “);<br />  lcd.setCursor(8, 0);<br />  lcd.print(“Z:”);<br />  lcd.print(g.gyro.z);<br />  Serial.print(g.gyro.z);<br />  Serial.println(” rad/s”);<br /> <br />Temperature scale.<br />  Serial.print(“Temperature: “);<br />  lcd.setCursor(8, 1);<br />  lcd.print(“T:”);<br />  lcd.print(temp.temperature);<br />  Serial.print(temp.temperature);<br />  Serial.println(” degC”);<br /> <br />  Serial.println(“”);<br />  delay(100);<br />}</pre> <p>Jika semua kode sudah di tulis, upload kode tersebut ke arduino board lalu lihat apa yang tampil di lcd dan serial monitor</p> <p>Pastikan library berikut ini sudah terinstall pada IDE anda</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/353/1*Ta5buwNz7D2uQk43aV3lvA.png"/><figcaption>Library untuk di Arduino IDE</figcaption></figure> <figure><img alt="" src="https://cdn-images-1.medium.com/max/487/1*nORH7vFctbKbwJH5egDnOA.png"/></figure> <figure><img alt="" src="https://cdn-images-1.medium.com/max/842/1*nHDIQ4njWNy5HxEWYMwciA.png"/></figure> <h3>Praktik Lanjutan</h3> <p>Ubah codingan dengan code berikut ini untuk menampilkan data accelerometer ke LCD</p> <pre>#include &lt;LiquidCrystal_I2C.h&gt;<br />#include &lt;Adafruit_MPU6050.h&gt;<br />#include &lt;Adafruit_Sensor.h&gt;<br />#include &lt;Wire.h&gt;<br /><br />Adafruit_MPU6050 mpu;<br />LiquidCrystal_I2C lcd(0x27, 16, 2);<br /><br />void setup(void) {<br />  Serial.begin(115200);<br />  Wire.begin();<br />  lcd.init();<br />  lcd.backlight();<br />  mpu.begin();<br /><br />  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);<br />  mpu.setGyroRange(MPU6050_RANGE_500_DEG);<br />  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);<br />  delay(100);<br />}<br /><br />void loop() {<br /><br />  /* Get new sensor events with the readings */<br />  sensors_event_t a, g, temp;<br />  mpu.getEvent(&amp;a, &amp;g, &amp;temp);<br /><br />  /* Print out the values */<br />  Serial.print(&quot;Acceleration X: &quot;);<br />  Serial.print(a.acceleration.x);<br />  Serial.print(&quot;, Y: &quot;);<br />  Serial.print(a.acceleration.y);<br />  Serial.print(&quot;, Z: &quot;);<br />  Serial.print(a.acceleration.z);<br />  Serial.println(&quot; m/s^2&quot;);<br /><br />  Serial.print(&quot;Rotation X: &quot;);<br />  lcd.setCursor(0, 0);<br />  lcd.print(&quot;X:&quot;);<br />  lcd.print(a.acceleration.x);<br />  Serial.print(g.gyro.x);<br /><br />  Serial.print(&quot;, Y: &quot;);<br />  lcd.setCursor(0, 1);<br />  lcd.print(&quot;Y:&quot;);<br />  lcd.print(a.acceleration.y);<br />  Serial.print(g.gyro.y);<br /><br />  Serial.print(&quot;, Z: &quot;);<br />  lcd.setCursor(8, 0);<br />  lcd.print(&quot;Z:&quot;);<br />  lcd.print(a.acceleration.z);<br />  Serial.print(g.gyro.z);<br />  Serial.println(&quot; rad/s&quot;);<br /><br />  Serial.print(&quot;Temperature: &quot;);<br />  lcd.setCursor(8, 1);<br />  lcd.print(&quot;T:&quot;);<br />  lcd.print(temp.temperature);<br />  Serial.print(temp.temperature);<br />  Serial.println(&quot; degC&quot;);<br /><br />  Serial.println(&quot;&quot;);<br />  delay(500);<br />}</pre> <p>Jalankan dan arahkan sensor sesuai dengan axisnya dan lihat perubahan di lcd</p> <h3><strong>Simulasi Lanjutan</strong></h3> <figure><img alt="" src="https://cdn-images-1.medium.com/max/711/1*EfDYXjJmFK9jNCr8aFgZDA.png"/></figure> <p>Simulasi ulang dengan lcd 20X4 <br/>untuk menampilkan semua angka dari sensor Acc dan Gyro</p> <p>copy codingan berikut ini</p> <pre>#include &lt;LiquidCrystal_I2C.h&gt;<br />#include &lt;Adafruit_MPU6050.h&gt;<br />#include &lt;Adafruit_Sensor.h&gt;<br />#include &lt;Wire.h&gt;<br /><br />Adafruit_MPU6050 mpu;<br />LiquidCrystal_I2C lcd(0x27, 16, 2);<br /><br />void setup(void) {<br />  Serial.begin(115200);<br />  Wire.begin();<br />  lcd.init();<br />  lcd.backlight();<br />  mpu.begin();<br /><br />  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);<br />  mpu.setGyroRange(MPU6050_RANGE_500_DEG);<br />  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);<br />  delay(100);<br />}<br /><br />void loop() {<br /><br />  /* Get new sensor events with the readings */<br />  sensors_event_t a, g, temp;<br />  mpu.getEvent(&amp;a, &amp;g, &amp;temp);<br /><br />  /* Print out the values */<br />  Serial.print(&quot;Acceleration X: &quot;);<br />  Serial.print(a.acceleration.x);<br />  Serial.print(&quot;, Y: &quot;);<br />  Serial.print(a.acceleration.y);<br />  Serial.print(&quot;, Z: &quot;);<br />  Serial.print(a.acceleration.z);<br />  Serial.println(&quot; m/s^2&quot;);<br /><br />  Serial.print(&quot;Rotation X: &quot;);<br />  Serial.print(g.gyro.x);<br /><br />  Serial.print(&quot;, Y: &quot;);<br />  Serial.print(g.gyro.y);<br /><br />  Serial.print(&quot;, Z: &quot;);<br />  Serial.print(g.gyro.z);<br />  Serial.println(&quot; rad/s&quot;);<br /><br /><br /> //print to lcd gyroscope<br />  lcd.setCursor(0, 0);<br />  lcd.print(&quot;X:&quot;);<br />  lcd.print(g.gyro.x);<br /><br />  lcd.setCursor(0, 1);<br />  lcd.print(&quot;Y:&quot;);<br />  lcd.print(g.gyro.y);<br /><br />  lcd.setCursor(0, 2);<br />  lcd.print(&quot;Z:&quot;);<br />  lcd.print(g.gyro.z);<br /><br />//print to lcd accelerometer<br />  lcd.setCursor(8, 0);<br />  lcd.print(&quot;X:&quot;);<br />  lcd.print(a.acceleration.x);<br /><br />  lcd.setCursor(8, 1);<br />  lcd.print(&quot;Y:&quot;);<br />  lcd.print(a.acceleration.y);<br /><br />  lcd.setCursor(8, 2);<br />  lcd.print(&quot;Z:&quot;);<br />  lcd.print(a.acceleration.z);<br /><br /><br />  Serial.println(&quot;&quot;);<br />  delay(500);<br />}</pre> <p>Lalu jalankan</p> <p><a href="https://srituhobby.com/how-to-use-mpu6050-with-arduino-step-by-step-instructions/">https://srituhobby.com/how-to-use-mpu6050-with-arduino-step-by-step-instructions/</a></p> <p><a href="https://wokwi.com/projects/428188319987479553">https://wokwi.com/</a></p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=00d5dc1727d2" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry><entry><title type="html">Mengukur Suhu dan Kelembaban Menggunakan Arduino UNO dan DHT-11</title><link href="https://mhvvn.github.io/blog/2025/mengukur-suhu-dan-kelembaban-menggunakan-arduino-uno-dan-dht-11/" rel="alternate" type="text/html" title="Mengukur Suhu dan Kelembaban Menggunakan Arduino UNO dan DHT-11"/><published>2025-04-08T12:14:28+00:00</published><updated>2025-04-08T12:14:28+00:00</updated><id>https://mhvvn.github.io/blog/2025/mengukur-suhu-dan-kelembaban-menggunakan-arduino-uno-dan-dht-11</id><content type="html" xml:base="https://mhvvn.github.io/blog/2025/mengukur-suhu-dan-kelembaban-menggunakan-arduino-uno-dan-dht-11/"><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/750/0*9aN6wthub8OeBcbg.gif"/></figure> <p>Selamat datang di modul praktikum kali ini! Di era serba digital ini, pemahaman tentang bagaimana perangkat elektronik berinteraksi dengan lingkungan fisik menjadi semakin penting. Salah satu interaksi mendasar adalah kemampuan untuk mengukur besaran-besaran fisik seperti suhu dan kelembaban.</p> <p>Dalam modul ini, kita akan menjelajahi dunia sensor suhu dan kelembaban menggunakan salah satu sensor yang populer dan terjangkau, yaitu <strong>DHT11</strong>. Kita akan mempelajari bagaimana sensor ini bekerja, bagaimana cara menghubungkannya dengan mikrokontroler <strong>Arduino</strong>, dan yang tak kalah penting, bagaimana cara menampilkan data suhu dan kelembaban yang terukur pada sebuah layar <strong>LCD (Liquid Crystal Display)</strong>.</p> <p>Praktikum ini dirancang untuk memberikan pemahaman praktis tentang:</p> <ul><li><strong>Prinsip kerja sensor DHT11:</strong> Memahami bagaimana sensor ini mendeteksi perubahan suhu dan kelembaban di lingkungan sekitarnya.</li><li><strong>Interfacing sensor dengan Arduino:</strong> Mempelajari cara menghubungkan pin-pin sensor DHT11 dengan pin-pin digital pada board Arduino.</li><li><strong>Pemrograman Arduino untuk sensor DHT11:</strong> Menulis kode program menggunakan Arduino IDE untuk membaca data suhu dan kelembaban dari sensor.</li><li><strong>Interfacing Arduino dengan LCD:</strong> Memahami cara menghubungkan modul LCD 16x2 (atau sejenisnya) dengan Arduino.</li><li><strong>Menampilkan data pada LCD:</strong> Memprogram Arduino untuk mengirimkan data suhu dan kelembaban yang terbaca ke layar LCD agar dapat dilihat secara langsung.</li></ul> <figure><img alt="" src="https://cdn-images-1.medium.com/max/480/0*jAJW___vzKZ38up8.png"/><figcaption>Sensor DHT 11 3 Pins</figcaption></figure> <p>Sensor DHT11 bekerja dengan mengombinasikan dua elemen penginderaan:</p> <ul><li><strong>Sensor Kelembaban Kapasitif:</strong> Terdiri dari lapisan substrat penahan kelembaban di antara dua elektroda. Perubahan kelembaban udara menyebabkan perubahan kapasitansi substrat. Perubahan kapasitansi ini diukur dan dikonversi menjadi sinyal digital yang merepresentasikan tingkat kelembaban.</li><li><strong>Thermistor (NTC — Negative Temperature Coefficient):</strong> Resistor yang nilai resistansinya berubah terhadap suhu. Ketika suhu meningkat, resistansi thermistor menurun, dan sebaliknya. Perubahan resistansi ini diukur dan dikonversi menjadi sinyal digital yang merepresentasikan suhu.</li></ul> <p><strong>Proses Pengambilan Data:</strong></p> <ol><li><strong>Permintaan dari Mikrokontroler:</strong> Mikrokontroler (seperti Arduino) mengirimkan sinyal start khusus ke sensor DHT11 melalui pin data.</li><li><strong>Respon dari Sensor:</strong> DHT11 menerima sinyal start dan mengirimkan sinyal respon untuk menunjukkan bahwa ia siap mengirimkan data.</li><li><strong>Pengiriman Data:</strong> Sensor mengirimkan data suhu dan kelembaban dalam bentuk paket data digital (biasanya 40-bit) melalui pin data. Paket data ini mencakup bagian integer dan desimal dari nilai kelembaban, bagian integer dan desimal dari nilai suhu, serta checksum untuk verifikasi data.</li><li><strong>Pembacaan Data oleh Mikrokontroler:</strong> Mikrokontroler membaca paket data digital ini dengan timing yang tepat sesuai dengan protokol komunikasi serial satu-kawat yang digunakan oleh DHT11.</li><li><strong>Pengolahan Data:</strong> Mikrokontroler kemudian memproses data digital yang diterima untuk mendapatkan nilai suhu dan kelembaban dalam format yang dapat digunakan (misalnya, derajat Celsius dan persentase kelembaban relatif).</li></ol> <p>Sekarang lanjut ke tutorialnya dengan menyiapkan beberap peralatan sebagai berikut ini :</p> <blockquote><strong>-Komputer/laptop (upload code)<br/>-Arduino UNO (atau MCU lain)<br/>-Modul sensor DHT-11<br/>-Project board (opsional)<br/>-Kabel jumper (male to female &amp; male to male)</strong></blockquote> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*zq6Rh7d-uWqjydEHqnTZqA.png"/><figcaption>Rangkaian SImulasi Sonsor suhu DHT 11 dan LCD i2C</figcaption></figure> <ol><li>Sambungkan pin pada sensor DHT11</li></ol> <p>VCC → Plus + Breadboard , GND → Minus — Breadboard dan Data → 3 Digital arduino seperti pada gambar simulasi di bawah ini.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*2ygpNPnxtlKGJ3WBxvd6PA.png"/><figcaption>Wiring DHT 11</figcaption></figure> <p>2. Selanjutnya menyambungkan pin pada Modul LCD i2C</p> <p>VCC → Plus + Breadboard , GND → Minus — Breadboard , SCL → pin SCL (paling dari deretan pin digital arduino) lalu SDA → SDA (kedua dari pinggir pin digital arduino)</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/864/1*OArCA58SydhgTpzMKIplGA.png"/></figure> <p>Untuk penyusunan rangkaian sudah selesai, sekarang cek apakah sudah sesuai semua pin yg di sambungkan pada papan arduino seperti gambar berikut.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/480/1*17YaDgugjwQT57cRbogDbw.png"/></figure> <p>Lalu untuk sambungan pada breadboard akan terlihat seperti berikut ini</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/947/1*qa_gzjYCMctAuzhoKYyQtw.png"/></figure> <p>pastikan semua sambungan sesuai dan tidak tertukar antar plus dan minus agar tidak mengakibatkan konsleting atau tidak terbaca pada sistem komputer.</p> <p>Jika semua sambungan sudah sesuai, selanjutnya adalah melakukan coding untuk memberikan printah dan logic agar sensor dan lcd dapat di gunakan dan di kontol oleh arduino.</p> <p>Berikut ini adalah penjelasan setiap baris code yg di gunakan.</p> <p>#include &lt;Wire.h&gt; <strong>// Library komunikasi I2C, dibutuhkan untuk LCD I2C</strong><br/> #include &lt;LiquidCrystal_I2C.h&gt; // <strong>Library untuk mengontrol LCD I2C</strong><br/> #include &lt;DHT.h&gt; // <strong>Library untuk membaca sensor DHT11</strong><br/> <br/> #define DHTPIN 3 // <strong>Mendefinisikan pin digital 3 sebagai pin data untuk sensor DHT11</strong><br/> #define DHTTYPE DHT11 // <strong>Menentukan bahwa tipe sensor yang digunakan adalah DHT11</strong><br/> <br/> LiquidCrystal_I2C lcd(0x27,16,2); // <strong>Inisialisasi LCD dengan alamat I2C 0x27, ukuran 16 kolom dan 2 baris</strong><br/> DHT dht(DHTPIN, DHTTYPE); // <strong>Membuat objek dht untuk mengakses sensor DHT11 pada pin dan tipe yang telah ditentukan</strong><br/> <br/> void setup() {<br/> Serial.begin(9600); // <strong>Memulai komunikasi serial dengan baud rate 9600</strong><br/> dht.begin(); // <strong>Menginisialisasi sensor DHT11</strong><br/> lcd.init(); // <strong>Menginisialisasi LCD</strong><br/> lcd.backlight(); // <strong>Menyalakan backlight LCD</strong><br/> lcd.setCursor(0,0); // <strong>Menempatkan kursor di kolom 0 baris 0</strong><br/> lcd.print(“Class”); // <strong>Menampilkan teks “Class” pada baris pertama LCD</strong><br/> lcd.setCursor(0,1); // <strong>Memindahkan kursor ke kolom 0 baris 1</strong><br/> lcd.print(“Sensor &amp; Transduser”); // <strong>Menampilkan teks “Sensor &amp; Transduser” di baris kedua</strong><br/> delay(1000); // <strong>Menunggu selama 1 detik (1000 milidetik)</strong><br/> }<br/> <br/> void loop() {<br/> float h = dht.readHumidity(); // <strong>Membaca kelembaban dari sensor dan menyimpannya ke variabel h</strong><br/> float t = dht.readTemperature(); // <strong>Membaca suhu dalam Celcius dan menyimpannya ke variabel t</strong><br/> <br/> lcd.setCursor(0,0); // <strong>Menempatkan kursor di kolom 0 baris 0</strong><br/> lcd.print(“Suhu : “); // <strong>Menampilkan teks “Suhu : “</strong><br/> lcd.print(t); // <strong>Menampilkan nilai suhu</strong><br/> <br/> lcd.setCursor(0,1); // <strong>Menempatkan kursor di kolom 0 baris 1</strong><br/> lcd.print(“Kelembaban :”); // <strong>Menampilkan teks “Kelembaban :”</strong><br/> lcd.print(h); // <strong>Menampilkan nilai kelembaban</strong><br/> <br/> delay(1000); // <strong>Menunggu selama 1 detik sebelum membaca ulang sensor</strong><br/> }</p> <p>→ Sekarang buka arduino IDE dan create new Sketch <br/> → Download codingan atas untuk menjalankannya di <a href="https://github.com/mhvvn/Ultrasonic-Sensor"><strong>sini</strong></a><strong><br/> → C</strong>opy dan paste ke dalam file sketch yg telah di buat sebelumny<br/> → Pastikan semuanya tidak ada yg error</p> <p>→ <strong>Install library DHT 11</strong> seperti di bawah <strong>DHT kxn by adafruit</strong></p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/212/1*pEWwAk_xKOnCP-Xr-meumQ.png"/></figure> <p>→ Jika sudah, hubungkan kabel data usb antar arduino dan komputer<br/>→ Pastikan arduino teraca dengan baik dan pilih arduino tersebut sebaga destinasi untuk di upload codenya<br/>→ pastikan semua modul telah aktif dan teraliri listrik<br/>→ Upload code dengan mengklik button panah ke kanan → dan tunggu proses upload beberapa saat hingga lampu pada arduino selesai berkedip berarti tandanya sudah selesai.<br/>→ klik button 🔍 untuk membuka serial monitor</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*cWtEkh2qMP5mCiNc.jpg"/></figure> <p><strong>Pengamatan :<br/></strong> → Amati pada lcd apakah sudah menampilkan hasil pengukuran yg di dapat dari sensor DHT11<br/> → Jika sudah, silahkan manipulasi suhu dan kelembaban di sekitar agar mendapatakan perubahan pengkursan yg akan di tampilkan pada LCD</p> <p>Berikut ini referensi yg dapat di baca : <br/><a href="https://circuitdigest.com/microcontroller-projects/interfacing-dht11-sensor-with-arduino">https://circuitdigest.com/microcontroller-projects/interfacing-dht11-sensor-with-arduino</a><br/><a href="https://arduinogetstarted.com/tutorials/arduino-dht11">https://arduinogetstarted.com/tutorials/arduino-dht11</a> <br/><a href="https://www.youtube.com/watch?v=ch0fWuuGubI">https://www.youtube.com/watch?v=ch0fWuuGubI</a><br/><a href="https://www.youtube.com/watch?v=V1R3q1quIYA">https://www.youtube.com/watch?v=V1R3q1quIYA</a> <br/><a href="https://www.tinkercad.com/things/5FeHTlXJCn4-">https://www.tinkercad.com/things/5FeHTlXJCn4-</a></p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5000b497dffd" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry><entry><title type="html">a post with plotly.js</title><link href="https://mhvvn.github.io/blog/2025/plotly/" rel="alternate" type="text/html" title="a post with plotly.js"/><published>2025-03-26T14:24:00+00:00</published><updated>2025-03-26T14:24:00+00:00</updated><id>https://mhvvn.github.io/blog/2025/plotly</id><content type="html" xml:base="https://mhvvn.github.io/blog/2025/plotly/"><![CDATA[<p>This is an example post with some <a href="https://plotly.com/javascript/">plotly</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}
</code></pre> <p>Also another example chart.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>This is how it looks like:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included plotly.js code could look like]]></summary></entry><entry><title type="html">Ultrasonic Sensor Combine with LED and LCD</title><link href="https://mhvvn.github.io/blog/2025/ultrasonic-sensor-combine-with-led-and-lcd/" rel="alternate" type="text/html" title="Ultrasonic Sensor Combine with LED and LCD"/><published>2025-03-18T11:43:44+00:00</published><updated>2025-03-18T11:43:44+00:00</updated><id>https://mhvvn.github.io/blog/2025/ultrasonic-sensor-combine-with-led-and-lcd</id><content type="html" xml:base="https://mhvvn.github.io/blog/2025/ultrasonic-sensor-combine-with-led-and-lcd/"><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*4_JSnR5znZEJ0uWwVfb2rQ.png"/><figcaption>Skema arduino sensor ultrasonic, lcd dan led</figcaption></figure> <p>Pada tutorial kali ini masih dengan skema yg sama dengan tutorial sebelumnya, yg bisa di akses di <a href="https://medium.com/@skinnyboys/pengukuran-jarak-di-arduino-dengan-sensor-ultrasonik-dan-led-e6e6fd6ff607">sini</a>.</p> <p>Skenario tutorial kali ini adalah</p> <ul><li>LCD menampilkan jarak pengukuran yang di lakukan oleh sensor ultrasonik.</li><li>Lampu LED akan menyala sesuai dengan rentang yg di tentukan pada codingan.</li><li>Hijau ketika jarak &lt; 10 cm</li><li>Kuning ketika jarak &gt;10 cm — &lt; 20 cm</li><li>Merah ketika jarak &gt; 30 cm</li></ul> <p>Peralatan yg di butuhkan pada praktik kali ini :</p> <ol><li><strong>1 Arduino Uno</strong></li><li><strong>1 Cable USB A to B</strong></li><li><strong>9 Cable male to male</strong></li><li><strong>4 Cable mate to female</strong></li><li><strong>3 Led </strong>(red,yellow,green)</li><li><strong>3 Resistor (</strong>&lt;100K)</li><li><strong>1 BreadBoard</strong></li><li><strong>Sensor Ultraosnik (</strong>HC-SR04)</li><li><strong>LCD with 12C</strong> (16X2)</li></ol> <figure><img alt="Peralatan praktikum arduino sensor ultrasonic dan lcd serta led" src="https://cdn-images-1.medium.com/max/1024/1*e-RuIuB3-qHki20rXQrq-g.png"/><figcaption>Peralatan yg akan di gunakan</figcaption></figure> <h4><strong>Pertama</strong></h4> <p>Letakan modul ultrasonik pada breadboard dengan masing-masing pin diletakan dengan menggunakan kable male to male :</p> <p><strong>GND → 29b</strong> di hubungkan ke <strong>(-) </strong>breadboard</p> <p><strong>VCC →26b</strong> di hubungkan ke<strong> (+) </strong>breadboard</p> <p><strong>Echo → b27</strong> di hubungkan ke pin 10</p> <p><strong>Trig → b28</strong> yang di hubungkan ke pin 9</p> <p>Maka hasilnya akan seperi di bawah ini :</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/457/1*rEdGoaDKf0azBWU6EWiSVA.png"/><figcaption>Peletakan modul sensor ultrasonic di breadboard</figcaption></figure> <h4>Kedua</h4> <p>Sambungkan modul LCD I2C dengan menggunakan kable male to female yang masing-masing pada breadboard dan arduino board.</p> <p><strong>GND → </strong>di hubungkan ke <strong>(-) </strong>breadboard</p> <p><strong>VCC → </strong>di hubungkan ke<strong> (+)</strong> breadboard</p> <p>SDA → di hubungkan ke pin SDA pada arduino</p> <p>SCL → di hubungkan ke pin SCL pada arduino</p> <p>Jika sudah akan seperti gambar di bawah ini</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/522/1*KsaFGICcNBzijF4xVelAsA.png"/><figcaption>Skem kabel modul lcd</figcaption></figure> <figure><img alt="" src="https://cdn-images-1.medium.com/max/917/1*2Cw0Y8kqJCju9jR2jEcJQQ.png"/><figcaption>skema pengubungan kable lcd to arduino board</figcaption></figure> <p><strong>Ketiga</strong></p> <p>Letakan LED dan Resistor pada baris:</p> <p>LED Hijau (-) dengan resistor (+) di hubungkan ke → pin 4 arduino</p> <p>LED Kuning (-) dengan resistor (+) di hubungkan ke → pin 5 arduino</p> <p>LED Merah (-) dengan resistor (+) di hubungkan ke → pin 6 arduino</p> <p>untuk resistensi resistornya di angka 220K</p> <p>maka akan terlihat seperti gambar di bawah ini untuk skema led dan transistornya.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/481/1*4Otl-Abo8DZBVbMvcSp66w.png"/><figcaption>Peletakan led dan resistor di breadboard</figcaption></figure> <figure><img alt="" src="https://cdn-images-1.medium.com/max/345/1*691UGq21ysVTb72kBHLjkQ.png"/><figcaption>Pengubungan kabel led ke arduino board</figcaption></figure> <figure><img alt="" src="https://cdn-images-1.medium.com/max/334/0*hFuab8wiWLOg5HHW.png"/><figcaption>Nilai resistensi pada resistor</figcaption></figure> <h4>Keempat</h4> <p>Hubungkan arduino dengan breadboard menggunakan kable male to male</p> <p>Pin 5V → baris + Breadboard</p> <p>Pin GND → (—) breadboard</p> <p>jika sudah akan terlihat seperti di bawah ini untuk penyambungan kabel arduino board ke breadboardnya.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/697/1*2BWM5lDRRSeairFipa48xg.png"/><figcaption>Skema kabel arduino board ke breadboard</figcaption></figure> <p>Jika semua rangkaian sudah di sambungkan makan akan terlihat seperti di bawah ini untuk sekam full semua modulnya.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*4_JSnR5znZEJ0uWwVfb2rQ.png"/><figcaption>Skema arduino sensor ultrasonic, lcd dan led</figcaption></figure> <p><strong>Kelima</strong></p> <p>Masukan codingan logic untuk melakukan pengukuran menggunakan sensor ultrasonic, menampilkan ke lcd dan menyalakan lampu led.</p> <p>Sebelum itu, pastikan library untuk menjalankan LCD sudah terinstall, seperti di bawah ini :</p> <p>Pastika install library lcd I2C nya yaitu : LiquidCrystal_I2 by frank de brabander</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/227/1*Dz4fQHrKXeh91n0lQZT6wg.png"/><figcaption>library lcd I2C</figcaption></figure> <p>Copy lalu paste ke dalam arduino IDE</p> <blockquote>Code bisa di download di sini <a href="https://github.com/mhvvn/Ultrasonic-Sensor">link</a></blockquote> <p>Selanjutnya pastika arduino sudah terhubung ke komputer dan pastikan terbaca pada arduino IDE nya.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/459/1*1SAh5Ldv3f-L96kYscbI6g.png"/><figcaption>Port arduino board yg terbaca di komputer</figcaption></figure> <p>Pilih arduino board yg sudah di hubungkan ke komputer sebelumnya</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*J4GerganN7ymPrBXgug_fw.png"/><figcaption>Tampilan arduino IDE</figcaption></figure> <p>Paste semua kode di atas ke dalam IDE arduino seperti di atas.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/468/1*QeCk64oxttKTPStH8BTqmg.png"/><figcaption>Upload button arduino ide</figcaption></figure> <p>Selanjutnya upload codingan yg sudah di paste dengan mengklik button panah ke kanan → seperti di atas.</p> <p>Tunggu hingga code di upload dan di kompile hingga selesai.</p> <p>jika sudah amati pada rangkain arduino apakah layar lcd sudah menampilkan jarak pengukuran dari sensor serta lampu led menyala sesuai dengan rentang jarak yang sudah di setting pada codingan sebelumnya.</p> <p>pastikan semua berjalan dengan baik dan buktikan skenario yang ada di atas berhasil di lakuakan oleh rangkaian yang telah di buat.</p> <p><strong>Latihan</strong></p> <ol><li>Ubah jarak rentang menjadi</li></ol> <ul><li>Hijau di ≥ 150 cm</li><li>Kuning &gt; 100 cm — &gt;≤150 cm</li><li>Merah ≤ 100cm</li></ul> <p>Tambahkan Nama dan NIM Masing-masing pana opening pertama di LCD.</p> <p><strong>Tugas</strong></p> <ol><li>Buat laporan yang menjelskan langkah-langkag, peralatan yg di gunakan berserta fungsinya, lalu jelaskan hasil dari praktikum/tutorial yg sudah di lakukan, berhasil atau tidak</li><li>Buatlah opini atau ide dari praktikum ini untuk membatu kegiatan sehari-hari</li></ol> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=6229f512fe16" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry><entry><title type="html">Pengukuran Jarak di Arduino dengan Sensor Ultrasonik dan Led</title><link href="https://mhvvn.github.io/blog/2025/pengukuran-jarak-di-arduino-dengan-sensor-ultrasonik-dan-led/" rel="alternate" type="text/html" title="Pengukuran Jarak di Arduino dengan Sensor Ultrasonik dan Led"/><published>2025-03-11T10:44:43+00:00</published><updated>2025-03-11T10:44:43+00:00</updated><id>https://mhvvn.github.io/blog/2025/pengukuran-jarak-di-arduino-dengan-sensor-ultrasonik-dan-led</id><content type="html" xml:base="https://mhvvn.github.io/blog/2025/pengukuran-jarak-di-arduino-dengan-sensor-ultrasonik-dan-led/"><![CDATA[<p>Peralatan yang di butuhkan :</p> <ol><li><strong>Arduino Uno</strong></li><li><strong>Kabel USB A to B</strong></li><li><strong>9 Kabel Jammper</strong></li><li><strong>3 Led</strong></li><li><strong>3 Resistor</strong></li><li><strong>1 Papan BreadBoard</strong></li><li><strong>Sensor Ultraosnik HC-SR04</strong></li></ol> <p>Pada Tutorial praktik kali ini, akan mengukur jarak menggunakan sensor ultrasonik yang di rangkai di papan arduino dan di tambah lampu led penanda pengukuran jarak masuk dalam katagori dekat, menengah dan jauh.</p> <p>Pertama create new design circuits pada tinkercad</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/271/1*_JficwZKmXSPGgyRKsvw1A.png"/></figure> <p>Lalu cari dan add semua komponen yang di butuhkan pada side panel</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/305/1*hai3GWN_BEOGtqvlu0tcjQ.png"/></figure> <h4><strong>Langsung ke tutorialnya</strong></h4> <figure><img alt="" src="https://cdn-images-1.medium.com/max/862/1*Il64pBq4GyKPazpe8C9OmQ.png"/></figure> <p>Pertama rangkai led pada jalur breadboard letakan led hijau pada <strong>d2–d3, </strong>led kuning di d6-d7, led merah di d10–11.</p> <p>Resistor pada anode b2, b2, b10 yang langsung terhubung ke ground (<strong>-</strong>), lalu catode di hubungkan langsung ke pin arduino.</p> <p>a2 → pin 5</p> <p>a7 → pin 6</p> <p>a11 → pin7</p> <p>Jangan lupa untuk Ubuah resistance nya menjadi 220K</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/334/1*sV3b9knd-uMq86Arj_8jSQ.png"/></figure> <p>Selanjut nya untuk sensor ultrasonik HC-SR04 letakan di breadboard lalu hubungkan :</p> <p>Vcc → Plus Breadboard</p> <p>Trig → pin 9</p> <p>Echo → pin 10</p> <p>Grnd → Minus Breadboard</p> <p>Susunan sensor akan terlihat seperi gambar berikut ini.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/464/1*bl8r_ZAbYG7JDVNLWyUUhw.png"/></figure> <p>Lalu untuk susunan pada Arduino akan seperti di bawah ini:</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/347/1*caga-RhKgUOeVkvfnhVvtg.png"/></figure> <p>Pin 5V → Plus (+) dan GRND → Minu (-) pada breadboard</p> <p>Jika semua sudah terangkai makan akan terliha seperti gambar di bawah ini</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*2BN43aBCegy3Gi99iWnJYw.png"/></figure> <p>Selanjutnya tambahkan codingan untuk mengatur logik sensor dan menyalakan lampu led.</p> <p>klik code lalu udah mode code menjadi text seperti di bawah ini.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/413/1*0rAv1X-2VSh7rT_pJ0QZEw.png"/></figure> <p>Copy dan pastekan code di bawah ini ke dalam code tinkercadnya</p> <blockquote>#define trigPin 9<br/>#define echoPin 10<br/>#define ledHijau 5<br/>#define ledKuning 6<br/>#define ledMerah 7</blockquote> <blockquote>void setup() {<br/> pinMode(trigPin, OUTPUT);<br/> pinMode(echoPin, INPUT);<br/> pinMode(ledHijau, OUTPUT);<br/> pinMode(ledKuning, OUTPUT);<br/> pinMode(ledMerah, OUTPUT);<br/> Serial.begin(9600);<br/>}</blockquote> <blockquote>void loop() {<br/> long duration;<br/> int distance;</blockquote> <blockquote>// Kirim pulsa ultrasonik<br/> digitalWrite(trigPin, LOW);<br/> delayMicroseconds(2);<br/> digitalWrite(trigPin, HIGH);<br/> delayMicroseconds(10);<br/> digitalWrite(trigPin, LOW);</blockquote> <blockquote>// Baca waktu pantulan kembali<br/> duration = pulseIn(echoPin, HIGH);<br/> <br/> // Hitung jarak dalam cm<br/> distance = duration * 0.034 / 2;</blockquote> <blockquote>Serial.print(“Jarak: “);<br/> Serial.print(distance);<br/> Serial.println(“ cm”);</blockquote> <blockquote>// Logika LED berdasarkan jarak<br/> if (distance &gt; 30) { // Jarak jauh (LED hijau menyala)<br/> digitalWrite(ledHijau, HIGH);<br/> digitalWrite(ledKuning, LOW);<br/> digitalWrite(ledMerah, LOW);<br/> } else if (distance &gt; 15 &amp;&amp; distance &lt;= 30) { // Jarak sedang (LED kuning menyala)<br/> digitalWrite(ledHijau, LOW);<br/> digitalWrite(ledKuning, HIGH);<br/> digitalWrite(ledMerah, LOW);<br/> } else { // Jarak dekat (LED merah menyala)<br/> digitalWrite(ledHijau, LOW);<br/> digitalWrite(ledKuning, LOW);<br/> digitalWrite(ledMerah, HIGH);<br/> }</blockquote> <blockquote>delay(1000); // Delay untuk stabilitas sensor<br/>}</blockquote> <p>script bisa di download di sini <a href="https://github.com/mhvvn/Ultrasonic-Sensor">https://github.com/mhvvn/Ultrasonic-Sensor</a></p> <p>Jika sudah klik start simulasinya</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/202/1*8zmQbg9c5amGQ7X9niICzg.png"/></figure> <p>Untuk melihat hasil pengukuran dari sensor ultrasoniknya klik serial monitor seperti di bawah ini</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/380/1*ES1RneihKvhHHueSUZjBNA.png"/></figure> <p>Untuk membuktikan klik gambar sensor lalu gerakan objek untuk mengurangi dan menambah jarak pengukuran sensor seperti di bawah ini</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/740/1*RSf1cL4EMdyhQCs3NLxS5Q.png"/></figure> <p>Jika sudah di gerakan, lalu amati lagi hasil pengukuran pada serial monitor</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/232/1*g3B04ByhNZGA9aq3EKQ2sw.png"/></figure> <p>Selanjutnya amati lampu led yg di pasang sebelumnya, dan gerakan sesuai dengan jarak yang telah di tentukan pada codingan sebelumnya.</p> <p>Buktikan jika :</p> <blockquote>Jarak ≥30 cm maka led hijau menyala</blockquote> <blockquote>jarak ≥15 cm – ≤30 cm maka led kuning menyala</blockquote> <blockquote>Jarrak ≤ 15 cm maka led merah menyala</blockquote> <p>Jika semuanya sudah berjalan sesuai degan codingan berarti praktikum kali ini berhasil.</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e6e6fd6ff607" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry><entry><title type="html">a post with image galleries</title><link href="https://mhvvn.github.io/blog/2024/photo-gallery/" rel="alternate" type="text/html" title="a post with image galleries"/><published>2024-12-04T01:59:00+00:00</published><updated>2024-12-04T01:59:00+00:00</updated><id>https://mhvvn.github.io/blog/2024/photo-gallery</id><content type="html" xml:base="https://mhvvn.github.io/blog/2024/photo-gallery/"><![CDATA[<p>The images in this post are all zoomable, arranged into different mini-galleries using different libraries.</p> <h2 id="lightbox2"><a href="https://lokeshdhakar.com/projects/lightbox2/">Lightbox2</a></h2> <p><a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p> <hr/> <h2 id="photoswipe"><a href="https://photoswipe.com/">PhotoSwipe</a></h2> <div class="pswp-gallery pswp-gallery--single-column" id="gallery--getting-started"> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-pswp-width="1669" data-pswp-height="2500" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg" alt=""/> </a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-2500.jpg" data-pswp-width="1875" data-pswp-height="2500" data-cropped="true" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-200.jpg" alt=""/> </a> <a href="https://unsplash.com" data-pswp-src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1666" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg" alt=""/> </a> <div> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1667" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg" alt=""/> </a> </div> </div> <hr/> <h2 id="spotlight-js"><a href="https://nextapps-de.github.io/spotlight/">Spotlight JS</a></h2> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/> </a> </div> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg"/> </a> </div> <hr/> <h2 id="venobox"><a href="https://veno.es/venobox/">Venobox</a></h2> <p><a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what included image galleries could look like]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://mhvvn.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://mhvvn.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://mhvvn.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024 We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry></feed>